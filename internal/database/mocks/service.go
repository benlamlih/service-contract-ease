// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/jackc/pgx/v5/pgxpool"
	mock "github.com/stretchr/testify/mock"
)

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type Service
func (_mock *Service) Close() {
	_mock.Called()
	return
}

// Service_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Service_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Service_Expecter) Close() *Service_Close_Call {
	return &Service_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Service_Close_Call) Run(run func()) *Service_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Service_Close_Call) Return() *Service_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Service_Close_Call) RunAndReturn(run func()) *Service_Close_Call {
	_c.Run(run)
	return _c
}

// Health provides a mock function for the type Service
func (_mock *Service) Health(ctx context.Context) map[string]string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// Service_Health_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Health'
type Service_Health_Call struct {
	*mock.Call
}

// Health is a helper method to define mock.On call
//   - ctx
func (_e *Service_Expecter) Health(ctx interface{}) *Service_Health_Call {
	return &Service_Health_Call{Call: _e.mock.On("Health", ctx)}
}

func (_c *Service_Health_Call) Run(run func(ctx context.Context)) *Service_Health_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Service_Health_Call) Return(stringToString map[string]string) *Service_Health_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *Service_Health_Call) RunAndReturn(run func(ctx context.Context) map[string]string) *Service_Health_Call {
	_c.Call.Return(run)
	return _c
}

// Pool provides a mock function for the type Service
func (_mock *Service) Pool() *pgxpool.Pool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pool")
	}

	var r0 *pgxpool.Pool
	if returnFunc, ok := ret.Get(0).(func() *pgxpool.Pool); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgxpool.Pool)
		}
	}
	return r0
}

// Service_Pool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pool'
type Service_Pool_Call struct {
	*mock.Call
}

// Pool is a helper method to define mock.On call
func (_e *Service_Expecter) Pool() *Service_Pool_Call {
	return &Service_Pool_Call{Call: _e.mock.On("Pool")}
}

func (_c *Service_Pool_Call) Run(run func()) *Service_Pool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Service_Pool_Call) Return(pool *pgxpool.Pool) *Service_Pool_Call {
	_c.Call.Return(pool)
	return _c
}

func (_c *Service_Pool_Call) RunAndReturn(run func() *pgxpool.Pool) *Service_Pool_Call {
	_c.Call.Return(run)
	return _c
}
