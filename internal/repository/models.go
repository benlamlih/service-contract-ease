// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Subject string

const (
	SubjectMath     Subject = "math"
	SubjectScience  Subject = "science"
	SubjectHistory  Subject = "history"
	SubjectLanguage Subject = "language"
	SubjectArt      Subject = "art"
)

func (e *Subject) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Subject(s)
	case string:
		*e = Subject(s)
	default:
		return fmt.Errorf("unsupported scan type for Subject: %T", src)
	}
	return nil
}

type NullSubject struct {
	Subject Subject `json:"subject"`
	Valid   bool    `json:"valid"` // Valid is true if Subject is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubject) Scan(value interface{}) error {
	if value == nil {
		ns.Subject, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Subject.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubject) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Subject), nil
}

type Assignment struct {
	ID          uuid.UUID  `json:"id"`
	Title       string     `json:"title"`
	Subject     Subject    `json:"subject"`
	ClassroomID *uuid.UUID `json:"classroom_id"`
	DueDate     *time.Time `json:"due_date"`
}

type Classroom struct {
	ID        uuid.UUID  `json:"id"`
	Name      string     `json:"name"`
	TeacherID *uuid.UUID `json:"teacher_id"`
}

type Grade struct {
	ID           uuid.UUID  `json:"id"`
	StudentID    *uuid.UUID `json:"student_id"`
	AssignmentID *uuid.UUID `json:"assignment_id"`
	Score        int32      `json:"score"`
	Feedback     *string    `json:"feedback"`
	CreatedAt    *time.Time `json:"created_at"`
}

type Student struct {
	ID          uuid.UUID  `json:"id"`
	Name        string     `json:"name"`
	ClassroomID *uuid.UUID `json:"classroom_id"`
}

type Teacher struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Email string    `json:"email"`
}
